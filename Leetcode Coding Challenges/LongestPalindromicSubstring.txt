class Solution {
	    public String longestPalindrome(String s) {
	        String temp = "";
	        String longestPalindrome = "";
	        int length = 0;
	        if(s.length() <= 1){
	            return s;
	        }
	        for(int i = 0; i<s.length(); i++){
	
                if(i+1 < s.length() &&s.charAt(i) == s.charAt(i+1)) {
	                temp = evenPalindrome(s,i);
	                if(temp.length() > length){
	                    length = temp.length();
	                    longestPalindrome = temp;
	                }
	            }
                if(i-1>=0 && i+1<s.length() && s.charAt(i-1) == s.charAt(i+1)){
                    temp = oddPalindrome(s,i);
	                if(temp.length() > length){
	                    length = temp.length();
	                    longestPalindrome = temp;
	                }
                }
                else{
                    temp = "" + s.charAt(i);
	                if(temp.length() > length){
	                    length = temp.length();
	                    longestPalindrome = temp;
                    }
                }
	        }
	        return longestPalindrome;
	    }
	    
	    public String evenPalindrome(String s,int index){
	        String palindrome = s.substring(index,index+2);
	        int i = 1;
	        while(index-i >=0 && index+1+i<s.length() && s.charAt(index-i)==s.charAt(index+1+i) ){
	            palindrome = s.charAt(index-i)+ palindrome + s.charAt(index+1+i);
	            i++;
	        }
//	        System.out.println(palindrome);
	        return palindrome;
	    }
	    
	    public String oddPalindrome(String s,int index){
	        String palindrome = "" +s.charAt(index);
	        int i = 1;
	        while(index-i >=0 && index+i<s.length() && s.charAt(index-i)==s.charAt(index+i) ){
	            palindrome = s.charAt(index-i)+ palindrome + s.charAt(index+i);
	            i++;
	        }

	        return palindrome;
	    }
}